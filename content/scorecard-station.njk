---
layout: base
pagination:
  data: scorecard.index.stations
  size: 1
  alias: station
permalink: /scorecard/station/{{ station.id }}/
---

<div class="content">
  <div>
    <a href="/scorecard">Scorecard</a>
    > <a href="/scorecard/{{ station.state | slug }}/">{{ station.state }}</a>
    > {{ station.name }}
  </div>
  
  <h1>{{ station.name }}</h1>
  <table>
    <tr>
      <th>State</th>
      <td>{{ station.state }}</td>
    </tr>
    <tr>
      <th>Latitude</th>
      <td>{{ station.latitude }}</td>
    </tr>
    <tr>
      <th>Longitude</th>
      <td>{{ station.longitude }}</td>
    </tr>
  </table>

  <div id="map-container" style="width: 100%; max-width: 600px; overflow: hidden;">
    <!-- D3.js map will be rendered here -->
  </div>

  <h2>Metrics</h2>
</div>

<script src="https://d3js.org/d3.v7.min.js"></script>
<script src="https://unpkg.com/topojson-client@3"></script>
<script>
  const station = {{ station | dump | safe }};
  const width = 600;
  const height = 400;

  const svg = d3.select("#map-container").append("svg")
      .attr("viewBox", [0, 0, width, height])
      .attr("width", "100%")
      .attr("height", "auto")
      .attr("style", "max-width: 100%;");

  d3.json("https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json").then(us => {
    const state = topojson.feature(us, us.objects.states).features.find(d => d.properties.name === station.state);

    const projection = d3.geoIdentity().reflectY(true);
    const path = d3.geoPath(projection);

    // Fit the projection to the state
    projection.fitExtent([[0, 0], [width, height]], state);

    svg.append("g")
        .attr("fill", "#fff")
        .attr("stroke", "#000")
      .selectAll("path")
      .data([state])
      .join("path")
        .attr("d", path);

    svg.append("circle")
        .attr("cx", projection([station.longitude, station.latitude])[0])
        .attr("cy", projection([station.longitude, station.latitude])[1])
        .attr("r", 5)
        .attr("fill", "blue");
  });
</script>
