---
layout: base
pagination:
  data: scorecard.index.states
  size: 1
  alias: state
permalink: /scorecard/{{ state.abbr | slug }}/
---

<div class="content">
  <div>
    <a href="/scorecard">Scorecard</a>
    > {{ state.name }}
  </div>
  <div style="display: flex; justify-content: space-between; align-items: center;">
    <h1>{{state.name}}</h1>
    <div>
      <input type="radio" id="window_180" name="window" value="180" checked>
      <label for="window_180">180 days</label>
      <input type="radio" id="window_14" name="window" value="14">
      <label for="window_14">14 days</label>
    </div>
  </div>
  <div
    id="map-container" style="margin: 40px 0; width: 100%; max-width: 975px; overflow: hidden;"><!-- D3.js map will be rendered here -->
  </div>
  <img
    id="temperature-image"
    src="https://sa.dynamical.org/state_{{ state.abbr | lower }}_temperature_2m_rmse_by_lead_time_180_day_latest.png"
    alt="Temperature RMSE by lead time"
    style="max-width: 100%; height: auto;"/>
  <img
    id="precipitation-image"
    src="https://sa.dynamical.org/state_{{ state.abbr | lower }}_precipitation_surface_rmse_by_lead_time_180_day_latest.png"
    alt="Precipitation RMSE by lead time"
    style="max-width: 100%; height: auto;"/>
  <div id="station-list">
    <h2>Stations in {{ state.name }}</h2>
    <ul>
      {% for station in scorecard.index.stations %}
        {% if station.state_abbr == state.abbr %}
          <li>
            <a href="/scorecard/station/{{ station.id }}/">{{ station.name }}</a>
          </li>
        {% endif %}
      {% endfor %}
    </ul>
  </div>
</div>
<script src="https://d3js.org/d3.v7.min.js"></script>
<script src="https://unpkg.com/topojson-client@3"></script>
<script>
  const width = 975;
  const height = 610;
  const stateName = "{{ state.name }}";
  const stateAbbr = "{{ state.abbr }}";
  const svg = d3
    .select("#map-container")
    .append("svg")
    .attr("viewBox", [0, 0, width, height])
    .attr("width", "100%")
    .attr("height", "auto")
    .attr("style", "max-width: 100%;");
  d3.json("https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json").then(us => {
    const state = topojson
      .feature(us, us.objects.states)
      .features
      .find(d => d.properties.name === stateName);
    let projection = d3.geoIdentity().reflectY(true).fitExtent([
      [
        0, 0
      ],
      [
        width, height
      ]
    ], state);
    if (stateAbbr === "AK" || stateAbbr === "HI") {
      projection = d3.geoAlbersUsa().fitExtent([
        [
          0, 0
        ],
        [
          width, height
        ]
      ], state);
    }

    const path = d3.geoPath(projection);
    // 2. Draw the state
    svg
      .append("path")
      .datum(state)
      .attr("d", path)
      .attr("fill", "#fff")
      .attr("stroke", "#000");


    // 3. Project stations
    const stations = {{ scorecard.index.stations | dump | safe }}.filter(s => s.state_abbr === stateAbbr);
    svg
      .selectAll(".station")
      .data(stations)
      .enter()
      .append("a")
      .attr("xlink:href", d => `/scorecard/station/${
        d.id
      }/`)
      .append("circle")
      .attr("class", "station")
      .attr("r", 5)
      .attr("fill", "blue")
      .append("title")
      .text(d => d.name);
  });

  const radios = document.querySelectorAll('input[name="window"]');
  const tempImg = document.getElementById('temperature-image');
  const precipImg = document.getElementById('precipitation-image');
  const stateAbbr = "{{ state.abbr | lower }}";

  radios.forEach(radio => {
    radio.addEventListener('change', () => {
      const window = radio.value;
      tempImg.src = `https://sa.dynamical.org/state_${stateAbbr}_temperature_2m_rmse_by_lead_time_${window}_day_latest.png`;
      precipImg.src = `https://sa.dynamical.org/state_${stateAbbr}_precipitation_surface_rmse_by_lead_time_${window}_day_latest.png`;
    });
  });
</script>