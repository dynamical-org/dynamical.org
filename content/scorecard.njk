---
layout: base
title: Scorecard
---

<style>
  .table-container {
    overflow-x: auto;
  }
  table.data {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 1em;
  }
  table.data th,
  table.data td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
  }
  table.data th {
    background-color: #f2f2f2;
  }
</style>

<div class="content">
  <h1>Scorecard</h1>

  <h2>Overall Metrics</h2>
  {% for model_id, metrics_data in scorecard.index.summaryByModel %}
    <h3>{{ model_id | upper }}</h3>
    <div class="table-container">
      <table class="data">
        <thead>
          <tr>
            <th>Period</th>
            <th>MAE</th>
            <th>RMSE</th>
            <th>Bias</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Yesterday</td>
            <td>{{ metrics_data.yesterday.mae }}</td>
            <td>{{ metrics_data.yesterday.rmse }}</td>
            <td>{{ metrics_data.yesterday.bias }}</td>
          </tr>
          <tr>
            <td>Last 3 Days</td>
            <td>{{ metrics_data.last3days.mae }}</td>
            <td>{{ metrics_data.last3days.rmse }}</td>
            <td>{{ metrics_data.last3days.bias }}</td>
          </tr>
          <tr>
            <td>Last 7 Days</td>
            <td>{{ metrics_data.last7days.mae }}</td>
            <td>{{ metrics_data.last7days.rmse }}</td>
            <td>{{ metrics_data.last7days.bias }}</td>
          </tr>
          <tr>
            <td>Last 14 Days</td>
            <td>{{ metrics_data.last14days.mae }}</td>
            <td>{{ metrics_data.last14days.rmse }}</td>
            <td>{{ metrics_data.last14days.bias }}</td>
          </tr>
        </tbody>
      </table>
    </div>
  {% endfor %}

  <div id="map-container" style="width: 100%; max-width: 975px; overflow: hidden;">
    <!-- D3.js map will be rendered here -->
  </div>

  <div id="station-list">
    <h2>All Stations</h2>
    <ul>
      {% for station in scorecard.index.stations %}
        <li><a href="/scorecard/station/{{ station.id }}/">{{ station.name }}</a></li>
      {% endfor %}
    </ul>
  </div>
</div>

<script src="https://d3js.org/d3.v7.min.js"></script>
<script src="https://unpkg.com/topojson-client@3"></script>
<script>
  const width = 975;
  const height = 610;

  const projection = d3.geoAlbersUsa().scale(1300).translate([487.5, 305]);
  const path = d3.geoPath(projection);

  const svg = d3.select("#map-container").append("svg")
      .attr("viewBox", [0, 0, width, height])
      .attr("width", "100%")
      .attr("height", "auto")
      .attr("style", "max-width: 100%;");

  d3.json("https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json").then(us => {
    svg.append("g")
        .attr("fill", "#fff")
        .attr("stroke", "#000")
      .selectAll("path")
      .data(topojson.feature(us, us.objects.states).features)
      .join("path")
        .attr("d", path)
        .on("click", (event, d) => {
          window.location.href = `/scorecard/${d.properties.name.toLowerCase().replace(/\s+/g, '-')}/`;
        });

    svg.append("path")
        .attr("fill", "none")
        .attr("stroke", "#000")
        .attr("stroke-linejoin", "round")
        .attr("d", path(topojson.mesh(us, us.objects.states, (a, b) => a !== b)));

    const stations = {{ scorecard.index.stations | dump | safe }};

    svg.selectAll(".station")
      .data(stations)
      .enter().append("a")
        .attr("xlink:href", d => `/scorecard/station/${d.id}/`)
      .append("circle")
        .attr("class", "station")
        .attr("cx", d => projection([d.longitude, d.latitude])[0])
        .attr("cy", d => projection([d.longitude, d.latitude])[1])
        .attr("r", 5)
        .attr("fill", "blue")
        .style("cursor", "pointer")
        .append("title")
          .text(d => d.name);
  });
</script>
