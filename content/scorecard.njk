---
layout: base
title: Scorecard
---

<style>
  .table-container {
    overflow-x: auto;
  }
  table.data {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 1em;
  }
  table.data th,
  table.data td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
  }
  table.data th {
    background-color: #f2f2f2;
  }
</style>
<div class="content">
  <div class='responsive-flex'>
    <h1>Scorecard</h1>
    <div>
      <input type="radio" id="window_180" name="window" value="180" checked>
      <label for="window_180">180 days</label>
      <input type="radio" id="window_14" name="window" value="14">
      <label for="window_14">14 days</label>
    </div>
  </div>
  <div
    id="map-container" style="width: 100%; max-width: 975px; overflow: hidden;"><!-- D3.js map will be rendered here -->
  </div>
  <img
    id="temperature-image"
    src="https://sa.dynamical.org/country_us_temperature_2m_rmse_by_lead_time_180_day_latest.png"
    alt="Temperature RMSE by lead time"
    style="max-width: 100%; height: auto;"
  />
  <img
    id="precipitation-image"
    src="https://sa.dynamical.org/country_us_precipitation_surface_rmse_by_lead_time_180_day_latest.png"
    alt="Precipitation RMSE by lead time"
    style="max-width: 100%; height: auto;"
  />
  <div id="station-list">
    {% for s in scorecard.index.states %}
      <h3><a href='/scorecard/us-state/{{ s.abbr | slug }}'>{{ s.name }}</a></h3>
      <ul>
        {% for station in scorecard.index.stations %}
          {% if station.state_abbr == s.abbr %}
            <li>
              <a href="/scorecard/station/{{ station.id }}/">{{ station.name }}</a>
            </li>
          {% endif %}
        {% endfor %}
      </ul>
    {% endfor %}
  </div>
</div>
<script src="https://d3js.org/d3.v7.min.js"></script>
<script src="https://unpkg.com/topojson-client@3"></script>
<script>
  const width = 975;
  const height = 610;

  const stations = {{ scorecard.index.stations | dump | safe }};

  // World projection
  const projection = d3.geoNaturalEarth1()
    .fitExtent([[0, 0], [width, height]], { type: 'Sphere' });
  const path = d3.geoPath(projection);

  const svg = d3
    .select("#map-container")
    .append("svg")
    .attr("viewBox", [0, 0, width, height])
    .attr("width", "100%")
    .attr("height", "auto")
    .attr("style", "max-width: 100%;");

  d3.json("https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json").then(world => {
    const countries = topojson.feature(world, world.objects.countries).features;

    // Ocean background
    svg.append("path")
      .datum({ type: "Sphere" })
      .attr("fill", "#e6f2ff")
      .attr("d", path);

    // Countries as links derived from station country codes
    const anchors = svg
      .append("g")
      .attr("fill", "#fff")
      .attr("stroke", "#000")
      .selectAll("a.country-link")
      .data(countries)
      .join("a")
        .attr("class", "country-link")
        .attr("xlink:href", d => {
          const inside = stations.filter(s => d3.geoContains(d, [s.longitude, s.latitude]));
          if (!inside.length) return null;
          const counts = d3.rollup(inside, v => v.length, s => (s.country || '').toLowerCase());
          const top = Array.from(counts.entries()).sort((a,b) => b[1] - a[1])[0];
          const code = top && top[0];
          return code ? `/scorecard/country/${code}/` : null;
        })
        .style("cursor", function() { return this.getAttribute('xlink:href') ? 'pointer' : 'default'; });

    anchors
      .append("path")
        .attr("d", path)
      .append("title")
        .text(d => {
          const inside = stations.filter(s => d3.geoContains(d, [s.longitude, s.latitude]));
          if (!inside.length) return 'No stations';
          const counts = d3.rollup(inside, v => v.length, s => (s.country || '').toUpperCase());
          const top = Array.from(counts.entries()).sort((a,b) => b[1] - a[1])[0];
          return top ? `${top[0]} (${top[1]} stations)` : 'Stations';
        });

    // Country borders
    svg
      .append("path")
      .attr("fill", "none")
      .attr("stroke", "#000")
      .attr("stroke-linejoin", "round")
      .attr("d", path(topojson.mesh(world, world.objects.countries, (a, b) => a !== b)));

    // Plot stations globally
    svg
      .append('g')
      .selectAll(".station")
      .data(stations.filter(d => Array.isArray(projection([d.longitude, d.latitude]))))
      .enter()
      .append("circle")
      .attr("class", "station")
      .attr("cx", d => projection([d.longitude, d.latitude])[0])
      .attr("cy", d => projection([d.longitude, d.latitude])[1])
      .attr("r", 3)
      .attr("fill", "blue")
      .style("pointer-events", "none")
      .append("title")
      .text(d => d.name);
  });

  const radios = document.querySelectorAll('input[name="window"]');
  const tempImg = document.getElementById('temperature-image');
  const precipImg = document.getElementById('precipitation-image');

  radios.forEach(radio => {
    radio.addEventListener('change', () => {
      const window = radio.value;
      tempImg.src = `https://sa.dynamical.org/country_us_temperature_2m_rmse_by_lead_time_${window}_day_latest.png`;
      precipImg.src = `https://sa.dynamical.org/country_us_precipitation_surface_rmse_by_lead_time_${window}_day_latest.png`;
    });
  });
</script>